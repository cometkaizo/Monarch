compile with compile_settings
compile with function
compile function with parameters (paren_params_decl)
compile paren_params_decl with (var_param_decl)
compile function with statements (comment, print, function_call, var_decl, var_set, return, if, while)
compile return with (modulo, byte_lit, var_get)
compile var_set with (function_call, boolean_lit, divide, add, subtract, or, xor, lshift, rshift, multiply, byte_lit, time, scan, var_get)
compile multiply with (byte_lit, var_get)
compile divide with (byte_lit, var_get)
compile lshift with (byte_lit, var_get)
compile rshift with (byte_lit, var_get)
compile xor with (byte_lit, lshift, rshift, var_get)
compile function_call with (byte_lit, var_get)
compile print with (scan, time, add, modulo, subtract, string_lit, byte_lit, char_lit, var_get)
compile modulo with (byte_lit, subtract, var_get)
compile add with (byte_lit, modulo, subtract, function_call, time, var_get, char_lit)
compile or with (byte_lit, subtract, time, var_get)
compile subtract with (byte_lit, char_lit, var_get)
compile if with conditions (greater, lesser, boolean_lit, equals, var_get)
compile if with statements (comment, var_set, var_decl, print, break, if, while, function_call, debug_flag)
compile equals with (char_lit, byte_lit, var_get)
compile while with conditions (boolean_lit, lesser, greater)
compile while with statements (comment, var_decl, var_set, print, if, while, debug_flag)
compile lesser with (byte_lit, var_get)
compile greater with (byte_lit, var_get)

function main(): void {
    var age: byte;
    while (true) {
        var c: byte;
        c = scan;
        if (c == '\n') {
            break;
        }
        age = age * 10b;
        age = age + c - '0';
    }

    if (age > 17b) {
        print "OLD ENOUGH TO VOTE\n";
    } else {
        print "WAIT ";
        var yearsToWait: byte;
        yearsToWait = 18b - age;

        main.mnrc:printNum(yearsToWait);

        print " YEARS TO VOTE\n";
    }
}

function printNum(num: byte): void {
    if (num == 0b) {
        print '0';
    } else {
        var digitCount: byte;
        digitCount = main.mnrc:countDigits(num);
        var digit: byte;
        digit = digitCount - 1b;
        debugFlag;
        while (digit < digitCount) {
            debugFlag;
            print main.mnrc:getDigit(num, digit) + '0';
            digit = digit - 1b;
            debugFlag;
        }
        debugFlag;
    }
}

function countDigits(num: byte): byte {
    var digitCount: byte;
    while (num > 0b) {
        digitCount = digitCount + 1b;
        num = num / 10b;
    }
    return digitCount;
}

function getDigit(num: byte, digitIndex: byte): byte {
    while (digitIndex > 0b) {
        num = num / 10b;
        digitIndex = digitIndex - 1b;
    }
    return num % 10b;
}