compile with compile_settings
compile with function
compile with type_decl
compile type_decl with (byte_lit)
compile function with parameters (paren_params_decl)
compile function with return types (ref_type_get, static_type_get)
compile paren_params_decl with (var_param_decl)
compile var_param_decl with (ref_type_get, static_type_get)
compile function with statements (scan, debug, debug_flag, comment, free, print, function_call, var_decl, set, return, if, while)
compile return with (subtract, float32_lit, cast, modulo, byte_lit, boolean_lit, var_get)
compile free with (var_get)
compile set with targets (var_get, deref)
compile set with values (add, subtract, divide, modulo, toInt, cast, function_call, boolean_lit, float32_lit, or, xor, lshift, rshift, multiply, byte_lit, time, scan, var_get)
compile cast with values (byte_lit, malloc, malloc_set, ref, var_get)
compile cast with types (ref_type_get, static_type_get)
compile malloc with (byte_lit)
compile malloc_set with (string_lit)
compile multiply with (cast, byte_lit, toFloat, float32_lit, var_get)
compile divide with (toFloat, cast, byte_lit, float32_lit, var_get)
compile lshift with (int32_lit, byte_lit, var_get)
compile rshift with (int32_lit, byte_lit, var_get)
compile xor with (byte_lit, lshift, rshift, var_get)
compile function_call with (add, subtract, multiply, divide, ref, deref, byte_lit, float32_lit, function_call, var_get)
compile print with (scan, time, add, deref, modulo, subtract, string_lit, byte_lit, char_lit, var_get)
compile modulo with (toInt, cast, byte_lit, subtract, var_get)
compile add with (float32_lit, cast, byte_lit, divide, multiply, toFloat, modulo, subtract, deref, function_call, time, var_get, char_lit)
compile toFloat with values (var_get)
compile toFloat with types (static_type_get)
compile toInt with values (var_get)
compile toInt with types (static_type_get)
compile or with (byte_lit, subtract, time, var_get)
compile subtract with (multiply, divide, function_call, int32_lit, float32_lit, byte_lit, char_lit, var_get)
compile if with conditions (greater, lesser, boolean_lit, function_call, equals, var_get)
compile if with statements (comment, set, var_decl, print, break, if, while, function_call, debug_flag, return, debug)
compile equals with (cast, float32_lit, deref, char_lit, byte_lit, var_get)
compile while with conditions (and, boolean_lit, lesser, greater)
compile while with statements (comment, var_decl, set, print, if, while, debug_flag, function_call, free, debug)
compile and with (lesser, greater)
compile lesser with (float32_lit, byte_lit, function_call, var_get)
compile greater with (subtract, cast, float32_lit, byte_lit, function_call, var_get)
compile var_decl with (ref_type_get, static_type_get)
compile ref_type_get with (ref_type_get, static_type_get)
compile ref with (string_lit, var_get)
compile deref with (string_lit, var_get)

type byte = (1b, 0b);
type int32 = (4b, 0b);
type boolean = (1b, 0b);
type float32 = (4b, 0b);

function main(): void {
    var one: &byte; one = &! "1" as &byte;
    var two: &byte; two = &! "2" as &byte;
    var exit: &byte; exit = &! "exit" as &byte;

    while (true) {
        print "Enter 1 for F to C conversion\nEnter 2 for C to F conversion\nEnter exit to stop the program\nWhat is your choice? ";
        var temp: float32;
        var choice: &byte; choice = &! 30b 0b as &byte;
        var choiceLen: byte;

        scanString(choice, &choiceLen);

        debug;
        debugFlag;
        if (stringEquals(choice, choiceLen, one, 1b)) {
            print "Enter the temperature in degrees Fahrenheit: ";
            temp = scanFloat32();
            printFloat32(temp);
            print " degrees Fahrenheit is equal to ";

            temp = temp - 32f32;
            temp = temp * 5f32;
            temp = temp / 9f32;

            printFloat32(temp);
            print " degrees Celsius\n";
        } else {
            if (stringEquals(choice, choiceLen, two, 1b)) {
                print "Enter the temperature in degrees Celsius: ";
                temp = scanFloat32();
                printFloat32(temp);
                print " degrees Celsius is equal to ";

                temp = temp * 9f32;
                temp = temp / 5f32;
                temp = temp + 32f32;

                printFloat32(temp);
                print " degrees Fahrenheit\n";
            } else {
                if (stringEquals(choice, choiceLen, exit, 4b)) {
                    break;
                } else {
                    printString(choice, choiceLen);
                    print " is not an option!\n";
                }
            }
        }

        *! choice;
    }

    *! one;
    *! two;
    *! exit;
}

function printString(str: &byte, len: byte): void {
    var cIndex: byte; cIndex = 0b;
    while (cIndex < len) {
        var cPtr: &byte; cPtr = str + cIndex;
        print *cPtr;
        cIndex = cIndex + 1b;
    }
}

function scanString(buffer: &byte, len: &byte): void {
    var cIndex: byte;
    cIndex = 0b;

    while (cIndex < 30b) {
        var c: byte;
        c = scan;
        if (c == '\n') {
            break;
        }
        var cPtr: &byte;
        cPtr = buffer + cIndex;
        *cPtr = c;
        debugFlag;
        cIndex = cIndex + 1b;
    }

    debugFlag;
    *len = cIndex;
}

function stringEquals(a: &byte, aLen: byte, b: &byte, bLen: byte): boolean {
    var isCorrect: boolean;
    isCorrect = true;
    if (aLen == bLen) {
        var cIndex: byte;
        cIndex = 0b;
        while (cIndex < bLen & cIndex < aLen) {
            var aCPtr: &byte;
            var bCPtr: &byte;

            aCPtr = a + cIndex;
            bCPtr = b + cIndex;

            if (*aCPtr == *bCPtr) {}
            else {
                isCorrect = false;
                break;
            }
            cIndex = cIndex + 1b;
        }
    } else {
        isCorrect = false;
    }
    return isCorrect;
}

function scanInt32(): int32 {
	var num: int32;
	while (true) {
		var c: byte;
		c = scan;
		if (c == '\n') { break; }
		if (c == ' ') { break; }

        num = num * 10b as int32;
        c = c - '0';
        num = num + c as int32;

	}
	return num;
}

function scanFloat32(): float32 {
    var result: float32;
    var hasDecimals: boolean;
    var negative: boolean;
    result = 0f32;
    hasDecimals = false;
    negative = false;
    var c: byte;

    while (true) {
        c = scan;
        if (c == '-') { negative = true; }
        else {
            if (c == '.') {
                hasDecimals = true;
                break;
            } if (c == '\n') { break; }
            result = result * 10f32;
            c = c - '0';
            result = result + c toFloat float32;
        }
    }

    if (negative) { result = result * -1f32; }

    if (hasDecimals) {
        var digitPlaceValue: float32;
        digitPlaceValue = 0.1f32;
        while (true) {
            c = scan;
            if (c == '\n') { break; }
            c = c - '0';
            result = result + c toFloat float32 * digitPlaceValue;
            digitPlaceValue = digitPlaceValue / 10f32;
        }
    }

    return result;
}

function printFloat32(num: float32): void {
    if (num == 0f32) {
        print '0';
    } else {
        var beforeDecimalPoint: int32;
        beforeDecimalPoint = num toInt int32;
        printSInt32(beforeDecimalPoint);

        print '.';

        num = absF(num);

        var digitIndex: byte;
        digitIndex = 0b;
        while (digitIndex < 7b) {
            num = num * 10f32;
            var digit: int32;
            digit = num toInt int32 % 10b as int32;
            print digit as byte + '0';
            digitIndex = digitIndex + 1b;
        }
    }
}

function absF(num: float32): float32 {
    if (num < 0f32) {
        return 0f32 - num;
    } else {
        return num;
    }
}

function printSInt32(num: int32): void {
    var negThreshold: int32;
    negThreshold = 1i32 << 31b;
    if (num > negThreshold - 1i32) {
        num = num - negThreshold;
        num = negThreshold - num;
        print "-";
    }
    if (num == 0b as int32) {
        print '0';
    } else {
        var digitCount: byte;
        digitCount = countDigits(num);
        var digit: byte;
        digit = digitCount - 1b;
        while (digit < digitCount) {
            print getDigit(num, digit) + '0';
            digit = digit - 1b;
        }
    }
}

function countDigits(num: int32): byte {
    var digitCount: byte;
    while (num > 0b as int32) {
        digitCount = digitCount + 1b;
        num = num / 10b as int32;
    }
    return digitCount;
}

function getDigit(num: int32, digitIndex: byte): byte {
    while (digitIndex > 0b) {
        num = num / 10b as int32;
        digitIndex = digitIndex - 1b;
    }
    var digit: int32;
    digit = num % 10b as int32;
    return digit as byte;
}