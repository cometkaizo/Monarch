compile with compile_settings
compile with function
compile with type_decl
compile type_decl with (byte_lit)
compile function with parameters (paren_params_decl)
compile function with return types (ref_type_get, static_type_get)
compile paren_params_decl with (var_param_decl)
compile var_param_decl with (ref_type_get, static_type_get)
compile function with statements (scan, debug, debug_flag, comment, free, print, function_call, var_decl, set, return, if, while)
compile return with (subtract, float32_lit, cast, modulo, byte_lit, boolean_lit, var_get)
compile free with (var_get)
compile set with targets (var_get, deref)
compile set with values (add, subtract, divide, modulo, toInt, cast, function_call, boolean_lit, float32_lit, or, xor, lshift, rshift, multiply, byte_lit, time, scan, var_get)
compile cast with values (byte_lit, malloc, malloc_set, ref, var_get)
compile cast with types (ref_type_get, static_type_get)
compile malloc with (byte_lit)
compile malloc_set with (string_lit)
compile multiply with (cast, byte_lit, toFloat, float32_lit, var_get)
compile divide with (toFloat, cast, byte_lit, float32_lit, var_get)
compile lshift with (int32_lit, byte_lit, var_get)
compile rshift with (int32_lit, byte_lit, var_get)
compile xor with (byte_lit, lshift, rshift, var_get)
compile function_call with (add, subtract, multiply, divide, ref, deref, byte_lit, char_lit, float32_lit, function_call, var_get)
compile print with (scan, time, add, deref, modulo, subtract, string_lit, byte_lit, char_lit, var_get)
compile modulo with (toInt, cast, byte_lit, subtract, var_get)
compile add with (cast, byte_lit, divide, multiply, toFloat, modulo, subtract, deref, function_call, time, float32_lit, char_lit, var_get)
compile toFloat with values (var_get)
compile toFloat with types (static_type_get)
compile toInt with values (var_get)
compile toInt with types (static_type_get)
compile or with (byte_lit, subtract, time, var_get)
compile subtract with (multiply, divide, function_call, int32_lit, float32_lit, byte_lit, char_lit, var_get)
compile if with conditions (greater, lesser, boolean_lit, function_call, equals, var_get)
compile if with statements (comment, set, var_decl, print, break, if, while, function_call, debug_flag, return, debug)
compile equals with (cast, float32_lit, deref, char_lit, byte_lit, var_get)
compile while with conditions (and, boolean_lit, lesser, greater)
compile while with statements (comment, var_decl, set, print, if, while, debug_flag, function_call, free, debug)
compile and with (lesser, greater)
compile lesser with (float32_lit, byte_lit, function_call, var_get)
compile greater with (subtract, cast, float32_lit, byte_lit, function_call, var_get)
compile var_decl with (ref_type_get, static_type_get)
compile ref_type_get with (ref_type_get, static_type_get)
compile ref with (string_lit, var_get)
compile deref with (string_lit, var_get)

type byte = (1b, 0b);
type int32 = (4b, 0b);
type boolean = (1b, 0b);
type float32 = (4b, 0b);

function main(): void {
    var lineId: byte; lineId = 0b;
    var lineCnt: byte; lineCnt = 6b;
    while (lineId < lineCnt) {
        var spaceCount: byte;

        spaceCount = lineCnt - lineId;
        spaceCount = spaceCount - 1b;
        repeatPrint(' ', spaceCount);

        repeatPrint('*', lineId * 2b + 1b);
        print "\n";

        lineId = lineId + 1b;
    }
}

function repeatPrint(c: byte, count: byte): void {
    var id: byte; id = 0b;
    while (id < count) {
        print c;
        id = id + 1b;
    }
}