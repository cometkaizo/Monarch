compile with compile_settings
compile with function
compile function with parameters (paren_params_decl)
compile paren_params_decl with (var_param_decl)
compile var_param_decl with (ref_type_get, static_type_get)
compile function with statements (debug_flag, comment, free, print, function_call, var_decl, ref_set, var_set, return, if, while)
compile return with (modulo, byte_lit, boolean_lit, var_get)
compile free with (var_get)
compile var_set with (cast, function_call, boolean_lit, divide, add, subtract, or, xor, lshift, rshift, multiply, byte_lit, time, scan, var_get)
compile cast with values (malloc, ref)
compile cast with types (ref_type_get, static_type_get)
compile malloc with (byte_lit)
compile multiply with (byte_lit, var_get)
compile divide with (byte_lit, var_get)
compile lshift with (byte_lit, var_get)
compile rshift with (byte_lit, var_get)
compile xor with (byte_lit, lshift, rshift, var_get)
compile function_call with (deref, byte_lit, var_get)
compile print with (scan, time, add, deref, modulo, subtract, string_lit, byte_lit, char_lit, var_get)
compile modulo with (byte_lit, subtract, var_get)
compile add with (byte_lit, modulo, subtract, deref, function_call, time, var_get, char_lit)
compile or with (byte_lit, subtract, time, var_get)
compile subtract with (byte_lit, char_lit, var_get)
compile if with conditions (greater, lesser, boolean_lit, function_call, equals, var_get)
compile if with statements (comment, ref_set, var_set, var_decl, print, break, if, while, function_call, debug_flag, return)
compile equals with (deref, char_lit, byte_lit, var_get)
compile while with conditions (and, boolean_lit, lesser, greater)
compile while with statements (comment, var_decl, ref_set, var_set, print, if, while, debug_flag)
compile and with (lesser, greater)
compile lesser with (byte_lit, var_get)
compile greater with (byte_lit, var_get)
compile var_decl with (ref_type_get, static_type_get)
compile ref_type_get with (ref_type_get, static_type_get)
compile ref_set with targets (var_get)
compile ref_set with values (byte_lit, var_get)
compile ref with (string_lit, var_get)
compile deref with (string_lit, var_get)

function main(): void {
    var capital: &byte;
    var capitalLen: &byte;
    capital = &! 30b 0b as &byte;
    capitalLen = &! 1b 0b as &byte;

    print "What is the capital of Canada?\n";

    main.mnrc:scanString(capital, capitalLen);

    var correctAnswer: &byte;
    var correctAnswerLen: byte;
    correctAnswer = &"ottawa" as &byte;
    correctAnswerLen = 6b;

    print *capitalLen + '0';
    print " ==len== ";
    print correctAnswerLen + '0';
    print "\n";

    if (main.mnrc:stringEquals(capital, *capitalLen, correctAnswer, correctAnswerLen)) {
        print "Correct Answer\n";
    } else {
        print "Incorrect Answer\n";
    }

    *! capital;
    *! capitalLen;
}

function scanString(buffer: &byte, len: &byte): void {
    var cIndex: byte;
    cIndex = 0b;

    while (cIndex < 30b) {
        var c: byte;
        c = scan;
        if (c == '\n') {
            break;
        }
        var cPtr: &byte;
        cPtr = buffer + cIndex;
        *cPtr = c;
        cIndex = cIndex + 1b;
    }

    *len = cIndex;
}

function stringEquals(a: &byte, aLen: byte, b: &byte, bLen: byte): boolean {
    var isCorrect: boolean;
    isCorrect = true;
    if (aLen == bLen) {
        var cIndex: byte;
        cIndex = 0b;
        while (cIndex < bLen & cIndex < aLen) {
            var aCPtr: &byte;
            var bCPtr: &byte;

            aCPtr = a + cIndex;
            bCPtr = b + cIndex;

            print *aCPtr;
            print " == ";
            print *bCPtr;
            print "\n";

            if (*aCPtr == *bCPtr) {}
            else {
                isCorrect = false;
                break;
            }
            cIndex = cIndex + 1b;
        }
    } else {
        isCorrect = false;
    }
    return isCorrect;
}

function printNum(num: byte): void {
    if (num == 0b) {
        print '0';
    } else {
        var digitCount: byte;
        digitCount = main.mnrc:countDigits(num);
        var digit: byte;
        digit = digitCount - 1b;
        while (digit < digitCount) {
            print main.mnrc:getDigit(num, digit) + '0';
            digit = digit - 1b;
        }
    }
}

function countDigits(num: byte): byte {
    var digitCount: byte;
    while (num > 0b) {
        digitCount = digitCount + 1b;
        num = num / 10b;
    }
    return digitCount;
}

function getDigit(num: byte, digitIndex: byte): byte {
    while (digitIndex > 0b) {
        num = num / 10b;
        digitIndex = digitIndex - 1b;
    }
    return num % 10b;
}